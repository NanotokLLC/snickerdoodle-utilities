#!/bin/bash

BOLD='\033[1m'
ULINE='\033[4m'
NORM='\033[0m'
RED='\033[31m'
YELLOW='\033[33m'


declare -A openattr
openattr=(	["auth_alg"]="OPEN"
		["key_mgmt"]="NONE"
		["mode"]="0" )

declare -A wpaattr
wpaattr=( 	["auth_alg"]="OPEN"
		["key_mgmt"]="WPA-PSK"
		["mode"]="0" )

declare -A wpa2attr
wpa2attr=(	["auth_alg"]="OPEN"
		["key_mgmt"]="WPA-PSK"
		["proto"]="RSN"
		["mode"]="0" )

declare -A wepattr
wepattr=(	["auth_alg"]="OPEN"
		["key_mgmt"]="NONE"
		["mode"]="0" )

declare -A nettypes
nettypes=(	["open"]="conn_open"
		["wpa"]="conn_wpa"
		["wpa2"]="conn_wpa2"
		["wep"]="conn_wep" )


usage() {
	echo -e "Usage: $BOLD$0$NORM ${ULINE}scan${NORM}"
	echo -e "       $BOLD$0$NORM ${ULINE}open${NORM}|${ULINE}wpa${NORM}|${ULINE}wep${NORM} ${ULINE}ssid$NORM ${ULINE}password${NORM}"
}

print_break() {
	printf "%80s\r\n" | tr ' ' -
}

scan() {
	wpa_cli -iwlan0 scan > /dev/null
	scan_results=()

	#n the results, returning each network on a separate line
	while read -r line; do
		scan_results+=("$line")
	done <<< "$(wpa_cli scan_results | sed '/.*\]\s*$/d' | grep -E '^([0-9a-fA-F]{2}[:]){5}([0-9a-fA-F]{2})')"

	printf "\033[1m%2s   %-30s %-19s %s\033[0m\r\n" "ID" "Network" "BSSID" "Strength (dBm)"
	print_break

	# Format the output
	for i in "${!scan_results[@]}"; do
		netname=$(echo "${scan_results[$i]}" | cut -d$'\t' -f5)
		netbssid=$(echo "${scan_results[$i]}" | cut -d$'\t' -f1)
		netsig=$(echo "${scan_results[$i]}" | cut -d$'\t' -f3)

		if [[ "$netsig" -lt "-60" ]]; then
			if [[ "$netsig" -lt "-80" ]]; then
				printf -v netsig "$RED$netsig$NORM"
			else
				printf -v netsig "$YELLOW$netsig$NORM"
			fi
		fi
		printf "%2s:  %-30s %-19s %-4s\r\n" "$i" "$netname" "$netbssid" "$netsig"
	done
}

list() {
	wpa_cli -iwlan0 list_networks
}


add_network() {
	id=$(wpa_cli -iwlan0 add_network)
}


set_network_attrs() {
	declare -n attributes=$1
	for attr in "${!attributes[@]}"; do
		echo "Setting $attr to ${attributes[$attr]}"
		wpa_cli -iwlan0 set_network $id "$attr" "${attributes[$attr]}"
		if [[ $? -ne 0 ]]; then
			echo "Error setting attribute: $attr to ${attributes[$attr]}"
			return $?
		fi
	done
}


enable_network() {
	echo "Enabling network"
	wpa_cli -iwlan0 enable_network $id
	echo "Saving network configuration"
	wpa_cli -iwlan0 save_config
}

conn_open() {
	echo -e "${BOLD}Adding Open Network${NORM}"
	print_break

	netname="$1"

	set_network_attrs openattr

	echo "Setting ssid to $netname"
	wpa_cli -iwlan0 set_network $id ssid '"'$netname'"'

	enable_network
}


conn_wpa() {
	echo -e "${BOLD}Adding WPA Network${NORM}"
	print_break

	netname="$1"
	netpass="$2"

	set_network_attrs wpaattr

	echo "Setting ssid to $netname"
	wpa_cli -iwlan0 set_network $id ssid '"'$netname'"'

	echo "Setting psk to $netpass"
	wpa_cli -iwlan0 set_network $id psk '"'$netpass'"'

	enable_network
}


conn_wpa2() {
	echo -e "${BOLD}Adding WPA2 Network${NORM}"
	print_break

	netname="$1"
	netpass="$2"

	set_network_attrs wpa2attr

	echo "Setting ssid to $netname"
	wpa_cli -iwlan0 set_network $id ssid '"'$netname'"'

	echo "Setting psk to $netpass"
	wpa_cli -iwlan0 set_network $id psk '"'$netpass'"'

	enable_network
}

conn_wep() {
	echo -e "${BOLD}WEP Network${NORM}"
	print_break

	# Validate the password
	if ! [[ $2 == ^[0-9a-fA-F]{10}$ || $2 == ^[0-9a-fA-F]{32}$ ]]; then
		echo "Error: Invalid WEP passcode"
		return 1
	fi

	netname="$1"
	netpass="$2"

	set_network_attrs wepattr

	wpa_cli -iwlan0 set_network $id ssid '"'$netname'"'
	wpa_cli -iwlan0 set_network $id wep_key0 '"'$netpass'"'

	enable_network
}


select_security() {
	PS3="Select network security> "
	select type in "${!nettypes[@]}"; do
		case $type in
		"wpa"|"wpa2"|"wep"|"open")
			echo $type
			break
			;;
		"open")
			;;
		"q")
			# User cancelled
			echo ""
			break
			;;
		*)
			echo "Invalid selection: $type"
			;;
		esac
	done
}


connect_network() {
	case "$1" in
	"wpa"|"wpa2"|"wep")
		echo -n "Enter network password and press [ENTER]: "
		read password
		add_network
		eval "${nettypes[$1]}" "$2" "$password"
		;;
	"open")
		add_network
		conn_open "$2"
		;;
	*)
		echo "Invalid network type: $1"
		;;
	esac
}



if [ $# -lt 1 ]; then
	echo -e "${BOLD}Entering interactive mode${NORM}"
	print_break

	netnames=()
	netbssid=()
	netflags=()
	while read -r line; do
		bssid="$(echo "$line" | cut -d$'\t' -f1)"
		name="$(echo "$line" | cut -d$'\t' -f5)"
		flags="$(echo "$line" | cut -d$'\t' -f4)"
		netnames+=("$name")
		netbssid+=("$bssid")
		netflags+=("$flags")
        done <<< "$(wpa_cli scan_results | sed '/.*\]\s*$/d' | grep -E '^([0-9a-fA-F]{2}[:]){5}([0-9a-fA-F]{2})')"

	PS3="Select Network> "

	select i in "${netnames[@]}" "Other" "Quit"; do
		case $i in
		"Other")
			echo -n "Enter the network SSID and press [ENTER]: "
			read ssid
			echo ""
			echo "Network: $ssid"
			echo ""
			security=$(select_security)
			connect_network "$security" "$ssid"
			break
			;;
		"Quit")
			break
			;;
		"")
			echo "Invalid selection"
			;;
		*)
			# Use the network flags to make a guess of what te of network
			# this is and prompt for the appropriate password type
			echo ""
			echo "Network: ${netnames[$REPLY-1]}"
			echo "BSSID:   ${netbssid[$REPLY-1]}"
			echo "Flags:   ${netflags[$REPLY-1]}"
			echo ""
			security=$(select_security)
			connect_network "$security" "${netnames[$REPLY-1]}"
			break
		esac
	done
	exit 0
else
	# Test if the network is already in the list
	# If the network exists, force the user to confirm the update, disconnect if connected
	# connected to the specified network, update the network settings,
	# and reconnect

	case "$1" in
	scan)
		scan
		;;
	list)
		echo "Listing..."
		list
		;;
	open)
		add_network
		conn_open "$2"
		;;
	wpa)
		add_network
		conn_wpa "$2" "$3"
		;;
	wpa2)
		add_network
		conn_wpa2 "$2" "$3"
		;;
	wep)
		conn_wep $2 $3
		;;
	*)
		usage
	esac
fi
